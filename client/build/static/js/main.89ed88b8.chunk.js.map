{"version":3,"sources":["components/MapAutoComplete.js","components/MapMarker.js","components/PlaceCard.js","components/ConstraintSlider.js","containers/MapContainer.js","App.js","registerServiceWorker.js","index.js"],"names":["MapAutoComplete","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSelect","value","state","geoCoderService","geocode","address","response","location","geometry","addMarker","lat","lng","markerName","handleSearch","autoCompleteService","length","searchQuery","input","radius","getQueryPredictions","dataSource","map","resp","description","setState","suggestions","suggestionts","singaporeLatLng","react_default","a","createElement","auto_complete","className","onSearch","placeholder","Component","MapMarker","_ref","name","key","icon","type","theme","twoToneColor","PlaceCard","info","distanceText","openNow","photoUrl","timeText","src","alt","ConstraintSlider","onChange","text","slider","min","max","Start_Coord","MapsContainer","updateConstraintName","event","preventDefault","prevConstraints","constraints","assign","target","updateConstraintTime","time","prevMarkers","markers","newMarker","i","message","success","concat","push","apiHasLoaded","mapsApi","mapsLoaded","orlandoLatLng","LatLng","places","AutocompleteService","placesService","PlacesService","Geocoder","directionService","DirectionsService","_this$state","filteredResults","marker","timeLimit","markerLatLng","placesRequest","query","rankBy","RankBy","DISTANCE","textSearch","responseLimit","Math","_loop","Place","rating","formatted_address","opening_hours","open_now","photos","getUrl","directionRequest","origin","destination","travelMode","route","result","status","travellingRoute","routes","legs","duration","distance","searchResults","warn","_this2","_this$state2","_this$state3","constraint","components_MapAutoComplete","components_ConstraintSlider","iconType","divider","lib_default","bootstrapURLKeys","libraries","defaultZoom","defaultCenter","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","maps","components_MapMarker","es_button","size","onClick","Fragment","components_PlaceCard","App","MapContainer","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","addEventListener","fetch","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.89ed88b8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { AutoComplete } from 'antd';\r\n\r\nclass MapAutoComplete extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      suggestionts: [],\r\n      dataSource: [],\r\n      singaporeLatLng: this.props.singaporeLatLng,\r\n      autoCompleteService: this.props.autoCompleteService,\r\n      geoCoderService: this.props.geoCoderService,\r\n    }\r\n  }\r\n\r\n  // Runs after clicking away from the input field or pressing 'enter'.\r\n  // Geocode the location selected to be created as a marker.\r\n  onSelect = ((value) => {\r\n    this.state.geoCoderService.geocode({ address: value }, ((response) => {\r\n      const { location } = response[0].geometry;\r\n      this.props.addMarker(location.lat(), location.lng(), this.props.markerName);\r\n    }))\r\n  });\r\n\r\n\r\n  // Runs a search on the current value as the user types in the AutoComplete field.\r\n  handleSearch = ((value) => {\r\n    const { autoCompleteService}= this.state;\r\n    // Search only if there is a string\r\n    if (value.length > 0) {\r\n      const searchQuery = {\r\n        input: value,\r\n        location: value,\r\n        // location: singaporeLatLng, // Search in Singapore\r\n        radius: 3000, \r\n      };\r\n      autoCompleteService.getQueryPredictions(searchQuery, ((response) => {\r\n        // The name of each GoogleMaps suggestion object is in the \"description\" field\r\n        if (response) {\r\n          const dataSource = response.map((resp) => resp.description);\r\n          this.setState({ dataSource, suggestions: response });\r\n        }\r\n      }));\r\n    }\r\n  });\r\n\r\n  render() {\r\n    const { dataSource } = this.state;\r\n    return (\r\n      <AutoComplete\r\n        className=\"w-100\"\r\n        dataSource={dataSource}\r\n        onSelect={this.onSelect}\r\n        onSearch={this.handleSearch}\r\n        placeholder=\"Place\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapAutoComplete;","import React from 'react';\r\nimport { Icon } from 'antd';\r\n\r\nconst MapMarker = (({ name, key }) => {\r\n  return (\r\n    <div key={key}>\r\n      <span className=\"brand-red\">{name}</span>\r\n      <Icon className=\"font-1-5\" type=\"environment\" theme=\"twoTone\" twoToneColor=\"#fd0000\" />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MapMarker;","import React from 'react';\r\n// import { Rate } from 'antd';\r\n\r\n// TODO: info is bad naming.\r\nconst PlaceCard = (({ info, key }) => {\r\n  const { address, distanceText, name, openNow, photoUrl, timeText } = info;\r\n  return (\r\n    <div key={key} className=\"col-3 w-100 mx-4 my-4\">\r\n      <img src={photoUrl} className=\"image-wrapper-sm mb-2\" alt=\"ice-cream\" />\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{name}</h5>\r\n          <span className=\"d-block mb-1\">{address}</span>\r\n          <span className=\"d-block\">{distanceText}</span>\r\n          <span className=\"d-block\">{timeText}</span>\r\n        </div>\r\n        <ul className=\"list-group list-group-flush\">\r\n          {openNow ?\r\n            <li className=\"list-group-item\">Open</li>\r\n            :\r\n            <li className=\"list-group-item\">Closed</li>\r\n          }\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default PlaceCard;","import React from 'react';\r\nimport {  Slider } from 'antd';\r\n\r\nconst ConstraintSlider = (({ value, onChange, text }) => {\r\n  return (\r\n    < section className=\"d-flex flex-column\" >\r\n      <div className=\"d-flex w-100 align-items-center\">\r\n        {/* <Icon className=\"font-1-5 mr-4\" type={iconType} /> */}\r\n        <Slider className=\"w-100\" value={value} min={0} max={60} onChange={onChange} />\r\n      </div>\r\n      {/* <span className=\"text-center\">{text}</span> */}\r\n    </section >\r\n  );\r\n});\r\n\r\nexport default ConstraintSlider;","import React, { Component } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport MapAutoComplete from '../components/MapAutoComplete';\r\nimport MapMarker from '../components/MapMarker';\r\nimport PlaceCard from '../components/PlaceCard';\r\nimport ConstraintSlider from '../components/ConstraintSlider';\r\n\r\nimport { Button, Input, Divider, message } from 'antd';\r\n\r\nconst Start_Coord = { lat: 28.538336, lng: -81.379234 };\r\n\r\nclass MapsContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      constraints: [{ name: '', time: 0 }],\r\n      searchResults: [],\r\n      mapsLoaded: false,\r\n      markers: [],\r\n      map: {},\r\n      mapsApi: {},\r\n      orlandoLatLng: {},\r\n      autoCompleteService: {},\r\n      placesService: {},\r\n      geoCoderService: {},\r\n      directionService: {},\r\n    };\r\n  }\r\n\r\n  // Update name for constraint with index === key\r\n  updateConstraintName = ((event, key) => {\r\n    event.preventDefault();\r\n    const prevConstraints = this.state.constraints;\r\n    const constraints = Object.assign([], prevConstraints);\r\n    constraints[key].name = event.target.value;\r\n    this.setState({ constraints });\r\n  });\r\n\r\n  // Updates distance (in KM) for constraint with index == key\r\n  updateConstraintTime = ((key, value) => {\r\n    const prevConstraints = this.state.constraints;\r\n    const constraints = Object.assign([], prevConstraints);\r\n    constraints[key].time = value;\r\n    this.setState({ constraints });\r\n  });\r\n\r\n  // Adds a Marker to the GoogleMaps component\r\n  addMarker = ((lat, lng, name) => {\r\n    const prevMarkers = this.state.markers;\r\n    const markers = Object.assign([], prevMarkers);\r\n\r\n    // If name already exists in marker list just replace lat & lng.\r\n    let newMarker = true;\r\n    for (let i = 0; i < markers.length; i++) {\r\n      if (markers[i].name === name) {\r\n        newMarker = false;\r\n        markers[i].lat = lat;\r\n        markers[i].lng = lng;\r\n        message.success(`Updated \"${name}\" Marker`);\r\n        break;\r\n      }\r\n    }\r\n    // Name does not exist in marker list. Create new marker\r\n    if (newMarker) {\r\n      markers.push({ lat, lng, name });\r\n      message.success(`Added new \"${name}\" Marker`);\r\n    }\r\n\r\n    this.setState({ markers });\r\n  });\r\n\r\n  // Runs once when the Google Maps library is ready\r\n  // Initializes all services that we need\r\n  apiHasLoaded = ((map, mapsApi) => {\r\n    this.setState({\r\n      mapsLoaded: true,\r\n      map,\r\n      mapsApi,\r\n      orlandoLatLng: new mapsApi.LatLng(Start_Coord.lat, Start_Coord.lng),\r\n      autoCompleteService: new mapsApi.places.AutocompleteService(),\r\n      placesService: new mapsApi.places.PlacesService(map),\r\n      geoCoderService: new mapsApi.Geocoder(),\r\n      directionService: new mapsApi.DirectionsService(),\r\n    });\r\n  });\r\n\r\n  // With the constraints, find places \r\n  handleSearch = (() => {\r\n    const { markers, constraints, placesService, directionService, mapsApi } = this.state;\r\n    if (markers.length === 0) {\r\n      message.warn('Add a constraint and try again!');\r\n      return;\r\n    }\r\n    const filteredResults = [];\r\n    const marker = markers[0];\r\n    const timeLimit = constraints[0].time;\r\n    const markerLatLng = new mapsApi.LatLng(marker.lat, marker.lng);\r\n\r\n    const placesRequest = {\r\n      location: markerLatLng,\r\n      // radius: '30000', // Cannot be used with rankBy. Pick your poison!\r\n      type: ['tourist_attraction', 'museum'], // List of types: https://developers.google.com/places/supported_types\r\n      query: 'tourist',\r\n      rankBy: mapsApi.places.RankBy.DISTANCE, // Cannot be used with radius.\r\n    };\r\n\r\n    // First, search for ice cream shops.\r\n    placesService.textSearch(placesRequest, ((response) => {\r\n      // Only look at the nearest top 5.\r\n      const responseLimit = Math.min(5, response.length);\r\n      for (let i = 0; i < responseLimit; i++) {\r\n        const Place = response[i];\r\n        const { rating, name } = Place;\r\n        const address = Place.formatted_address; // e.g 80 mandai Lake Rd,\r\n        let photoUrl = '';\r\n        let openNow = false;\r\n        if (Place.opening_hours) {\r\n          openNow = Place.opening_hours.open_now; // e.g true/false\r\n        }\r\n        if (Place.photos && Place.photos.length > 0) {\r\n          photoUrl = Place.photos[0].getUrl();\r\n        }\r\n\r\n        // Second, For each iceCreamPlace, check if it is within acceptable travelling distance\r\n        const directionRequest = {\r\n          origin: markerLatLng,\r\n          destination: address, // Address of ice cream place\r\n          travelMode: 'DRIVING',\r\n        }\r\n        directionService.route(directionRequest, ((result, status) => {\r\n          if (status !== 'OK') { return }\r\n          const travellingRoute = result.routes[0].legs[0]; // { duration: { text: 1mins, value: 600 } }\r\n          const travellingTimeInMinutes = travellingRoute.duration.value / 60;\r\n          if (travellingTimeInMinutes < timeLimit) {\r\n            const distanceText = travellingRoute.distance.text; // 6.4km\r\n            const timeText = travellingRoute.duration.text; // 11 mins\r\n            filteredResults.push({\r\n              name,\r\n              rating,\r\n              address,\r\n              openNow,\r\n              photoUrl,\r\n              distanceText,\r\n              timeText,\r\n            });\r\n          }\r\n          // Finally, Add results to state\r\n          this.setState({ searchResults: filteredResults });\r\n        }));\r\n      }\r\n    }));\r\n  });\r\n\r\n  render() {\r\n    const { constraints, mapsLoaded, orlandoLatLng, markers, searchResults } = this.state;\r\n    const { autoCompleteService, geoCoderService } = this.state; // Google Maps Services\r\n    return (\r\n      <div className=\"w-100 d-flex py-4 flex-wrap justify-content-center\">\r\n        <h1 className=\"w-100 fw-md\">Let me show you the WORLD!!</h1>\r\n        {/* Constraints section */}\r\n        <section className=\"col-4\">\r\n          {mapsLoaded ?\r\n            <div>\r\n              {constraints.map((constraint, key) => {\r\n                const { name, time } = constraint;\r\n                return (\r\n                  <div key={key} className=\"mb-4\">\r\n                    <div className=\"d-flex mb-2\">\r\n                      <Input className=\"col-4 mr-2\" placeholder=\"Name\" onChange={(event) => this.updateConstraintName(event, key)} />\r\n                      <MapAutoComplete\r\n                        autoCompleteService={autoCompleteService}\r\n                        geoCoderService={geoCoderService}\r\n                        orlandoLatLng={orlandoLatLng}\r\n                        markerName={name}\r\n                        addMarker={this.addMarker}\r\n                      />\r\n                    </div>\r\n                    <ConstraintSlider\r\n                      iconType=\"car\"\r\n                      value={time}\r\n                      onChange={(value) => this.updateConstraintTime(key, value)}\r\n                      text=\"Minutes away by car\"\r\n                    />\r\n                    <Divider />\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            : null\r\n          }\r\n        </section>\r\n\r\n        {/* Maps Section */}\r\n        <section className=\"col-8 h-lg\">\r\n          <GoogleMapReact\r\n            bootstrapURLKeys={{\r\n              key: 'AIzaSyDJZVKAh9W4Op0a4i7YnnQ8L4TG7IbdUu4',\r\n              libraries: ['places', 'directions']\r\n            }}\r\n            defaultZoom={11}\r\n            defaultCenter={{ lat: Start_Coord.lat, lng: Start_Coord.lng }}\r\n            yesIWantToUseGoogleMapApiInternals={true}\r\n            onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)} // \"maps\" is the mapApi. Bad naming but that's their library.\r\n          >\r\n            {/* Pin markers on the Map*/}\r\n            {markers.map((marker, key) => {\r\n              const { name, lat, lng } = marker;\r\n              return (\r\n                <MapMarker key={key} name={name} lat={lat} lng={lng} />\r\n              );\r\n            })}\r\n          </GoogleMapReact>\r\n        </section>\r\n\r\n        {/* Search Button */}\r\n        <Button className=\"mt-4 fw-md\" type=\"primary\" size=\"large\" onClick={this.handleSearch}>Search!</Button>\r\n\r\n        {/* Results section */}\r\n        {searchResults.length > 0 ?\r\n          <>\r\n            <Divider />\r\n            <section className=\"col-12\">\r\n              <div className=\"d-flex flex-column justify-content-center\">\r\n                <h1 className=\"mb-4 fw-md\">Tadah! Go see stuff!</h1>\r\n                <div className=\"d-flex flex-wrap\">\r\n                  {searchResults.map((result, key) => (\r\n                    <PlaceCard info={result} key={key} />\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </section>\r\n          </>\r\n          : null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MapsContainer;","\r\nimport React, {Component} from 'react';\r\n// import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n// import home from \"./components/Pages/home\"\r\n// import searchForm from \"./components/Form/searchForm\"\r\nimport MapContainer from './containers/MapContainer';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './App.css';\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n      \r\n//       <div className=\"App-header\">\r\n//         <h2>I can SHOW you the WORLD!...</h2>\r\n//       </div>\r\n//       <Router>\r\n//       <div>\r\n//         <Route exact path=\"/\" component={searchForm} />\r\n//         {/* <Route exact path=\"/search\" component={signup} />\r\n//         <Route exact path=\"/search\" component={savedProfile} />\r\n//         <Route exact path=\"/search\" component={searchResult} /> */}\r\n//       </div>\r\n//     </Router>\r\n   \r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n// export default App;\r\n\r\nclass App extends Component {\r\n    render() {\r\n      return (\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n          </header>\r\n          <div className=\"container h-100\">\r\n            <MapContainer />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n\r\n\r\n// import { render } from 'react-dom';\r\n// render(<App/>, document.getElementById('app'));"],"sourceRoot":""}